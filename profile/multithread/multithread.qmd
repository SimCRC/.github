---
## Paper meta-information ##
title:  |
        Enable Multithread with data.table in \quad Mac/Intel chips \faIcon{apple}  \faIcon{microchip}
# shorttitle and shortauthors information will show in the header (not required)
shorttitle:  |
             Multithread with data.table \faIcon{apple}  \faIcon{microchip}
headerimage: "images/stanford.png"
highlight-style: arrow
code-block-bg: true
code-block-border-left: "#8D0E0D"
#shortauthors: Doe & Doe for the left side.
author:
  - name: Jorge Roa
    email: jorgeroa@stanford.edu
  - name: Fernando Alarid-Escudero
    email: falarid@stanford.edu
#    attributes:
#      corresponding: true
#    affiliations:
#      - id: uni
#        name: University of State
#        department: Department of Awesome
#  - name: Jane Doe
#    affiliations:
#      - ref: uni
#abstract: |
#  Ipsum nostra facilisis sapien nullam. Facilisi himenaeos pharetra ultricies scelerisque non fusce quisque aliquam netus tellus. Dictum #tellus et sociis quisque ornare ad a natoque magna blandit. Tortor duis aptent cursus lacus inceptos tristique magnis dictumst. Taciti varius #nascetur aliquet hac ornare vitae ultricies. Rhoncus primis purus morbi aliquet quam cubilia nullam malesuada ridiculus.
# keywords: [template, demo]
# thanks: Love to everyone.
## Bibliography meta-information ##
reference-section-title: Bibliography  # adjust name of reference section
bibliography: bibliography.bib
# You an also use a local CSL file
csl: https://www.zotero.org/styles/american-journal-of-sociology
## Formats ##
format:
  aog-article-pdf:
    keep-tex: false
    number-sections: true #number sections
    # Set alternative fonts here
    mainfont: Niramit
    linestretch: 1.3
    #sansfont: Futura-Medium
    include-in-header: 
      text: |
        \usepackage{xcolor}
        \usepackage{hyperref}
        \usepackage{float}
        \usepackage{graphicx}
        \usepackage{fontawesome5}
        \hypersetup{
          colorlinks=true,
          linkcolor=black,   % Color of internal links
          urlcolor=black,    % Color of external links
          citecolor=black,   % Color of citations
          filecolor=black    % Color of file links
        }
---

```{=tex}
\begin{figure}[H]
    \centering
    \includegraphics[width=0.2\textwidth]{images/logo_f.png}
\end{figure}
```
\vspace{100em}

```{=tex}
\begingroup
\hypersetup{linkcolor=black}
\tableofcontents
\endgroup
```
\newpage

![](images/appleintel.png){fig-align="center"}

# Introduction

This document shows you how to enable the use of multiple cores on Macs with Intel/Apple silicon chips (M1, M2, and M3). With the increasing shift towards multi-core processors, is crucial to employ them for improving performance, especially for data-intensive operations. Many applications, such as data.table in R, can benefit significantly from multithreading, allowing them to distribute tasks across multiple processor cores simultaneously.

Historically, enabling multithreading on macOS with Intel chips was straightforward. However, with the introduction of Apple silicon chips (like the M1, M2, and M3), there have been changes in the architecture that require a different approach to activate them.

# Initial setup

If we load data.table library in R studio, this message will appear in your console:

\vspace{1cm}

::: {layout="[[-1], [1], [-1]]"}
![](images/dt.png)
:::

\vspace{1cm}

As you can see, OpenMP support is needed to use multiple cores in Macs. Therefore, we must install those packages through the terminal and set the required paths to run OpenMP.

# Prerequisites

1)  Have the latest version of {{< fa brands r-project >}} studio.

2)  Have the latest version of Mac Ventura

# First Step

1)  Open your terminal. It should see like this:

::: {layout="[[-1], [1], [-1]]"}
![](images/firststep.png){fig-align="center"}
:::

# Second Step (Install homebrew)

![](images/homebrew.png){width="400" fig-align="center"}

[ ](https://brew.sh/) is an open-source software package management system that makes installing applications on Linux and Apple's macOS operating systems easier. Homebrew will help us install **`OpenMP`**. Open Multi-Processing allows us to run applications in parallel to efficient processes. In this case, we want to employ the multiple cores that Mac has for **`data.table`** wrangling.

As the Homebrew page states, Homebrew installs the stuff you need that Apple (or your Linux system) didn't. So, once we open our terminal, we need to paste this command on our terminal.

\footnotesize

``` bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

\normalsize

To install **`homebrew`**, you need to enter your password and press **`ENTER`**. After installing homebrew, you should see in your terminal this screen:

![](images/secondstep_home.png){width="450" fig-align="center"}

# Third Step (Check package and change paths)

\vspace{1em}

We need to be sure that homebrew was installed in the correct path. For this, we can type in the terminal:

``` bash
brew help
```

Set our paths properly if the command is not recognized.

| **Chip Type**                  | **Command to Set Path**                         |
|-----------------------------|-------------------------------------------|
| **Apple Silicon (M1, M2, M3)** | `export PATH=/opt/homebrew/bin:$PATH`           |
| **Intel**                      | `export PATH=/usr/local/opt/homebrew/bin:$PATH` |

# Fourth Step: Installing required packages (libopenmp, libopenmpt, llvm, cask, ggc)

\vspace{1em}

## Install llvm

\vspace{1em}

We need to install the llvm package to access the clang compiler, which helps us to set multithreading.

``` bash
brew install llvm
```

![](images/llvm.png){width="400" fig-align="center"}

Once the installation is finished, we should see this screen in the terminal. It's worth mention that this library 


![](images/llvm_end.png){width="500" fig-align="center"}


## Install libopenmp

``` bash
brew install libopenmp
```

This is the screen that you should see once the installation is done.

![](images/libopenmp.png){width="500" fig-align="center"}

## Install libopenmpt

``` bash
brew install libopenmpt
```



This is the screen that you should see once the installation is done.

![](images/libopenmpt.png){width="450" fig-align="center"}

## Install gcc

``` bash
brew install gcc
```

This is the screen that you should see once the installation is done.


![](images/ggc.png){width="450" fig-align="center"}

## Install --cask openmtp

``` bash
brew install --cask openmtp
```

This is the screen that you should see once the installation is done.

![](images/cask.png){width="500" fig-align="center"}

# Fifth Step: Create .R folder and Makevars file.

\vspace{1em}


We need to create a text file called **`Makevars`**. This file is necessary because we need to set a file with multiple paths where we will retrieve the various packages we have installed in our R environment. We need to open a new script in our R studio project or open our terminal to execute the next commands:

```r
dir.create('~/.R')

file.create('~/.R/Makevars')
```

**`dir.create`** creates a hidden folder in our environment, and **`file.create`** creates a text file in the folder we just created. This folder is located in our usrs folder. You can access your user folder and your hidden folders with the next shortcuts:


\footnotesize

|        Action              |       Mac Shortcut        |       Windows Shortcut       |
|:--------------------------:|:------------------------:|:----------------------------:|
| Go to your home folder      | **`CMD + Shift + H`**     | **`Win + E`**                |
| Show your hidden folders    | **`CMD + Shift + .`**     | **`Ctrl + H`** or **`Alt + V, H`** |
| Open File Explorer/Finder   | **`CMD + N (in Finder)`** | **`Win + E`**                |
| Search files                | **`CMD + Space`**         | **`Win + S`** or **`Ctrl + F`**    |
| Open Task Manager/Activity Monitor | **`CMD + Option + Esc`** | **`Ctrl + Shift + Esc`**   |
| Switch between windows      | **`CMD + Tab`**           | **`Alt + Tab`**              |

\normalsize

You should have this path (according to your chip).

![](images/path2.png){width="500" fig-align="center"}

# MOST IMPORTANT STEP: create makevars file and specify paths

This is the most important step to make the multithreading work. We need to modify correctly the `Makevars` file and specifiy the paths. 

# Sixth Step: Create our paths in our Makevars file.

Once we created our `Makevars` file, we need to edit it with the next command:

```r
file.edit('~/.R/Makevars')
````

A new window will open with the name of the file. Now, we must paste the following paths according to our chip (Apple Silicon or Intel). this step is also important because here we are indicating `data.table` where the libraries installed from `brew` are. If we don't follow this steps, `data.tabe`will be never able to unlock the multithreading. 

# Apple Silicon \faIcon{apple}

## Latest version (October 2024)

```bash
LDFLAGS += -L/opt/homebrew/opt/libomp/lib
CPPFLAGS += -I/opt/homebrew/opt/libomp/include
```

## Older versions

If by any reasons, the latest version doesn't work once you completed all the steps of this document, what you can do is replace this for paths that used to work in other MacOS versions. 

### First option

\footnotesize

```bash
LDFLAGS += -L/opt/homebrew/opt/libomp/lib -lomp
CPPFLAGS += -I/opt/homebrew/opt/libomp/include -Xclang -fopenmp

```
\normalsize


### Second option
\footnotesize

```bash
HOMEBREW_LOC=/opt/homebrew 
LLVM_LOC=$(HOMEBREW_LOC)/opt/llvm 
CC=$(LLVM_LOC)/bin/clang -fopenmp 
CXX=$(LLVM_LOC)/bin/clang++ -fopenmp 
CFLAGS=-g -O3 -Wall -pedantic -std=gnu99 -mtune=native -pipe 
CXXFLAGS=-g -O3 -Wall -pedantic -std=c++11 -mtune=native -pipe 
LDFLAGS=-L$(HOMEBREW_LOC)/opt/gettext/lib -L$(LLVM_LOC)/lib -Wl,-rpath,$(LLVM_LOC)/lib 
CPPFLAGS=-I$(HOMEBREW_LOC)/opt/gettext/include -I$(LLVM_LOC)/include
```

\normalsize


# Intel  \faIcon{microchip}

## Latest version (October 2024)


```bash
LDFLAGS += -L/opt/homebrew/opt/libomp/lib
CPPFLAGS += -I/opt/homebrew/opt/libomp/include
```


## Older versions

### First option

\footnotesize

```bash
LDFLAGS += -L/opt/homebrew/opt/libomp/lib -lomp
CPPFLAGS += -I/opt/homebrew/opt/libomp/include -Xclang -fopenmp

```
\normalsize


### Second option

\footnotesize

```bash
HOMEBREW_LOC=/usr/local
LLVM_LOC=$(HOMEBREW_LOC)/opt/llvm
CC=$(LLVM_LOC)/bin/clang -fopenmp 
CXX=$(LLVM_LOC)/bin/clang++ -fopenmp 
CFLAGS=-g -O3 -Wall -pedantic -std=gnu99 -mtune=native -pipe 
CXXFLAGS=-g -O3 -Wall -pedantic -std=c++11 -mtune=native -pipe 
LDFLAGS=-L$(HOMEBREW_LOC)/opt/gettext/lib -L$(LLVM_LOC)/lib -Wl,-rpath,$(LLVM_LOC)/lib 
CPPFLAGS=-I$(HOMEBREW_LOC)/opt/gettext/include -I$(LLVM_LOC)/include
```

\normalsize

At the end, the `Makevars`file should look like this:

![](images/makevars_updated.png){fig-align="center"}


Once you put the paths, save the text file and close it. The difference between Apple Silicon and Intel is just the path; everything else remains similar. For Apple Silicon, the path is **`/opt/homebrew`** and for Intel is **`/usr/local`**.


\vspace{1em}


# Seventh Step: Reinstall data.table and set your cores.

\vspace{1em}


Finally, we need to remove data.table and reinstall it via **`source`**. THIS STEP IS NECESSARY. 

\vspace{1em}


```r
remove.packages("data.table")
install.packages('data.table', type='source')
```

\vspace{1em}


If everything was done correctly, you should load the package with library(data.table) and see the following message.


![](images/library.png){fig-align="center"}

Remember that you can set more threads with **`setDTthreads`** (according to the specifications of your computer). Happy coding!



