---
title: "Enable Multithread with data.table in Mac/Intel chips"
subtitle: "Multithreading offers faster and more efficient data processing, allowing for quicker analysis of complex datasets."
author: "Jorge Roa, Fernando Alarid-Escudero"
format: 
    pdf:
      include-in-header: 
       - "PrettyPDF_assign3.tex"
       - text: |
                 \usepackage{fvextra}
                 \usepackage{setspace} % Add the setspace package
                 \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
                 \usepackage{setspace} % Include the setspace package
                 \doublespacing % Set global line spacing to double
                 % Custom LaTeX command for code chunks
                 \usepackage{etoolbox}
                 \BeforeBeginEnvironment{verbatim}{\singlespacing\small}
                 \AfterEndEnvironment{verbatim}{\doublespacing\normalsize}
      include-before-body:
       - "pagestyle.tex"
engine: knitr
bibliography: 'https://api.citedrive.com/bib/4eb42150-20c1-4d8d-a04b-370444e62663/references.bib?x=eyJpZCI6ICI0ZWI0MjE1MC0yMGMxLTRkOGQtYTA0Yi0zNzA0NDRlNjI2NjMiLCAidXNlciI6ICI0MjQ2IiwgInNpZ25hdHVyZSI6ICI5YjYwODRiZTg1NTQ2OGIyNTkzZGExMjJlODhhMGU0ZjNlMzU0ZDQ3NmE4ODE0MmQzNGE2OTYxYzljNmFlODc3In0=/bibliography.bib'
highlight-style: ayu
---

```{r setup, include=FALSE}
library(knitr)

# Hook to set single spacing before code chunks
knitr::knit_hooks$set(pre.chunk = function(x) {
  "\\begingroup\\singlespacing\n"
})

# Hook to revert to double spacing after code chunks
knitr::knit_hooks$set(post.chunk = function(x) {
  "\\endgroup\n"
})
```

![](images/appleintel.png){fig-align="center"}

This document shows you how we can enable the use of multiple cores on Macs with Intel/Apple silicon chips (M1 and M2).

------------------------------------------------------------------------

If we load data.table library in {{< fa brands r-project >}} studio, this message will appear in your console:

\vspace{1cm}

::: {layout="[[-1], [1], [-1]]"}
![](images/dt.png)
:::

\vspace{1cm}

As you can see, OpenMP support is needed to use multiple cores in Macs. Therefore, we must install those packages through the terminal and set the required paths to run OpenMP.

# Prerequisites

1)  Have the latest version of {{< fa brands r-project >}} studio.

2)  Have the latest version of Mac Ventura

# First Step

1)  Open your terminal. It should see like this:


::: {layout="[[-1], [1], [-1]]"}
![](images/firststep.png){fig-align="center"}
:::

# Second Step (Install homebrew)


![](images/homebrew.png){width="400" fig-align="center"}


[](https://brew.sh/) is an open-source software package management system that makes installing applications on Linux and Apple's macOS operating systems easier. Homebrew will help us install **`OpenMP`**. Open Multi-Processing allows us to run applications in parallel to efficient processes. In this case, we want to employ the multiple cores that Mac has for **`data.table`** wrangling.

As the Homebrew page states, Homebrew installs the stuff you need that Apple (or your Linux system) didn't. So, once we open our terminal, we need to paste this command on our terminal.

```{bash, eval = FALSE}

/bin/bash -c "$(curl -fsSL 
https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

To install **`homebrew`**, you need to enter your password and press **`ENTER`**. After installing homebrew, you should see in your terminal this screen:

\vspace{-2cm}

![](images/secondstep_home.png)


# Third Step (Check package and change paths)

We need to be sure that homebrew was installed in the correct path. For this, we can type in the terminal:

```{bash, eval = FALSE}
brew help
```

We need to set our paths properly if the command is not recognized.

| Apple chips ![](images/Apple-Silicon.png){width="30"}|
|---------------------------------|
|    **`export PATH=/opt/homebrew/bin:$PATH`**    
| Intel chips ![](images/intel.png){width="40" height="15"}|
| **`export PATH=/usr/local/opt/homebrew/bin:$PATH`** |


With these changes, we can rerun homebrew help, and this information should appear in our terminal.

::: {layout="[[-1], [1], [-1]]"}
![](images/brew_help.png)
:::

# Fourth Step: Installing required packages (libopenmp, libopenmpt, llvm, cask, ggc)

\vspace{-.5cm}

## Install llvm

We need to install the llvm package to access the clang compiler, which helps us to set multithreading.

```{bash, eval = FALSE}
brew install llvm
```

\vspace{-1cm}

::: {layout="[[-1], [1], [-1]]"}
![](images/llvm.png)
:::

Once the installation is finished, we should see this screen in the terminal.

::: {layout="[[-1], [1], [-1]]"}
![](images/llvm_end.png)
:::

## Install libopenmp

```{bash, eval = FALSE}
brew install libopenmp
```

This is the screen that you should see once the installation is done.


![](images/libopenmp.png){fig-align="center"}


## Install libopenmpt

```{bash, eval = FALSE}
brew install libopenmpt
```

This is the screen that you should see once the installation is done.

\vspace{-1cm}


![](images/libopenmpt.png){fig-align="center"}
:::

## Install gcc

```{bash, eval = FALSE}
brew install gcc
```

This is the screen that you should see once the installation is done.

\vspace{-1cm}


![](images/ggc.png){fig-align="center"}


## Install --cask openmtp

```{bash, eval = FALSE}
brew install --cask openmtp
```

This is the screen that you should see once the installation is done.



![](images/cask.png){fig-align="center"}}


# Fifth Step: create .R folder and Makevars file.

We need to create a text file called **`Makevars`**. This file is necessary because we need to set a file with multiple paths where we will retrieve the various packages we have installed in our R environment. We need to open a new script or open our terminal to execute the next commands:

```{r, eval = FALSE}
dir.create('~/.R')

file.create('~/.R/Makevars')
```

**`dir.create`** creates a hidden folder in our environment, and **`file.create`** creates a text file in the folder we just created. This folder is located in our usrs folder. You can access your user folder and your hidden folders with the next shortcuts:

|        Open Finder        |       Shortcuts       |
|:-------------------------:|:---------------------:|
|  Go to your home folder:  | **`CMD + Shift + H`** |
| Show your hidden folders: | **`CMD + Shift + .`** |

You should have this path (according to your chip).

::: {layout="[[-1], [1], [-1]]"}
![](images/path2.png)
:::

# Sixth Step: Create our paths in our Makevars file.

We need to open our Makevars file with TextEdit, and we must paste the following paths according to our chip (Apple Silicon or Intel)

## Apple Silicon

```{bash, eval = FALSE}
HOMEBREW_LOC=/opt/homebrew 
LLVM_LOC=$(HOMEBREW_LOC)/opt/llvm 
CC=$(LLVM_LOC)/bin/clang -fopenmp 
CXX=$(LLVM_LOC)/bin/clang++ -fopenmp 
CFLAGS=-g -O3 -Wall -pedantic -std=gnu99 -mtune=native -pipe 
CXXFLAGS=-g -O3 -Wall -pedantic -std=c++11 -mtune=native -pipe 
LDFLAGS=-L$(HOMEBREW_LOC)/opt/gettext/lib -L$(LLVM_LOC)/lib -Wl,-rpath,$(LLVM_LOC)/lib 
CPPFLAGS=-I$(HOMEBREW_LOC)/opt/gettext/include -I$(LLVM_LOC)/include
```


![](images/makevar_mac.png){fig-align="center"}


## Intel

```{bash, eval = FALSE}
HOMEBREW_LOC=/usr/local
LLVM_LOC=$(HOMEBREW_LOC)/opt/llvm
CC=$(LLVM_LOC)/bin/clang -fopenmp 
CXX=$(LLVM_LOC)/bin/clang++ -fopenmp 
CFLAGS=-g -O3 -Wall -pedantic -std=gnu99 -mtune=native -pipe 
CXXFLAGS=-g -O3 -Wall -pedantic -std=c++11 -mtune=native -pipe 
LDFLAGS=-L$(HOMEBREW_LOC)/opt/gettext/lib -L$(LLVM_LOC)/lib -Wl,-rpath,$(LLVM_LOC)/lib 
CPPFLAGS=-I$(HOMEBREW_LOC)/opt/gettext/include -I$(LLVM_LOC)/include

```


![](images/makevar_intel.png){fig-align="center"}


Once you put the paths, save the text file and close it. The difference between Apple Silicon and Intel is just the path; everything else remains similar. For Apple Silicon, the path is **`/opt/homebrew`** and for Intel is **`/usr/local`**.

# Seventh Step: Reinstall data.table and set your cores.

Finally, we need to remove data.table and reinstall it via **`source`**.

```{r, eval = FALSE}
remove.packages("data.table")
install.packages('data.table', type='source')
```

If everything was done correctly, you should load the package with library(data.table) and see the following message.


![](images/library.png){fig-align="center"}

Remember that you can set more threads with **`setDTthreads`** (according to the specifications of your computer). Happy coding!




